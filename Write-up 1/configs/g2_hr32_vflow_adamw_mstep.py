import albumentations as A

config = dict(
    model=dict(
        type='HRVFLOW',
        params=dict(
            backbone=dict(
                hrnet_type='hrnetv2_w32',
                pretrained=True
            ),
            loss=dict(
                agl_weight=1.,
                mag_weight=2.,
                angle_weight=10.,
                scale_weight=10.
            ),
            GLOBAL=dict(
                weight=dict(
                    path=None,
                )
            ),
        )
    ),
    data=dict(
        train=dict(
            type='GeoposeLoader',
            params=dict(
                root_dir='./dataset/comp-train-half-res',
                csv_file='./dataset/geopose_train.csv',
                units_per_meter='m',
                is_augmentation=True,
                batch_size=8,
                num_workers=4,
                extra_aug=A.Compose([
                    A.RandomBrightnessContrast(p=0.2),
                    A.RandomGamma(p=0.2),
                    A.RGBShift(p=0.2)
                ]),
                aug_params=dict(
                    rotate_prob=0.3,
                    flip_prob=0.3,
                    scale_prob=0.3,
                    agl_prob=0.3,
                )
            ),
        )
    ),
    optimizer=dict(
        type='adamw',
        params=dict(
            weight_decay=0.0001
        ),
        grad_clip=dict(
            max_norm=35,
            norm_type=2,
        )
    ),
    learning_rate=dict(
        type='multistep',
        params=dict(
            steps=[60000, 80000],
            gamma=0.1,
            base_lr=0.0002,
        )
    ),
    train=dict(
        forward_times=1,
        num_iters=90000,
        eval_per_epoch=False,
        summary_grads=False,
        summary_weights=False,
        distributed=True,
        apex_sync_bn=True,
        sync_bn=True,
        eval_after_train=False,
        log_interval_step=100,
        save_ckpt_interval_epoch=999,
        eval_interval_epoch=999,
    ),
    test=dict(
    ),
)
